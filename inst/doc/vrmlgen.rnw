%
% NOTE -- ONLY EDIT THE .Rnw FILE!!!  The .tex file is
% likely to be overwritten.
%
% \VignetteIndexEntry{VRMLGen: An R-package for 3D Data Visualization on the Web}
% \VignetteKeywords{vrml, plot, 3d}
% \VignettePackage{vrmlgen}


\documentclass[article]{jss}
\SweaveOpts{eps=false}

%\usepackage{pdfpages}
%\usepackage[times,hyper]{Rd}
\usepackage[hyper]{Rd}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% declarations for jss.cls %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% almost as usual
\author{Enrico Glaab \And 
        Jonathan M. Garibaldi\\University of Nottingham, School of Computer Science \And 
        Natalio Krasnogor}
\title{\pkg{VRMLGen}: An R-package for 3D Data Visualization on the Web}

%% for pretty printing and a nice hypersummary also set:
\Plainauthor{Enrico Glaab, Jonathan M. Garibaldi, Natalio Krasnogor} %% comma-separated
\Plaintitle{VRMLGen - An R-package for 3D Data Visualization on the web} %% without formatting
%%\Shorttitle{A Capitalized Title} %% a short title (if necessary)


% use these commands to prevent large gaps between images and text
\renewcommand\floatpagefraction{.95}
\renewcommand\topfraction{.95}
\renewcommand\bottomfraction{.95}
\renewcommand\textfraction{.05}   

%\setcounter{totalnumber}{50}
%\setcounter{topnumber}{50}
%\setcounter{bottomnumber}{50}

%% an abstract and keywords
\Abstract{
  
   
   The 3-dimensional representation and inspection of complex data is a 
   frequently used strategy in many data analysis domains. Existing data mining 
   software often lacks functionality that would enable users to explore 3D data 
   interactively, especially if one wishes to make dynamic graphical 
   representations directly viewable on the web.
         
   In this paper we present \pkg{vrmlgen}, a software package for the 
   statistical programming language \proglang{R} to create 3D data 
   visualizations in web-formats like the Virtual Reality Markup Language (VRML) 
   and LiveGraphics3D. \pkg{vrmlgen} can be used to generate 3D charts and bar 
   plots, scatter plots with density estimation contour surfaces, and 
   visualizations of height maps, 3D object models and parametric functions. For 
   greater flexibility, the user can also access low-level plotting methods 
   through a unified interface and freely group different function calls 
   together to create new higher-level plotting methods. Additionally, we 
   present a web-tool allowing users to visualize 3D data online and test some 
   of \pkg{vrmlgen}'s features without the need to install any software on their 
   computer.
   
   
}
\Keywords{vrml, 3d, visualization, graph, chart, plot, model}
\Plainkeywords{vrml, 3d, visualization, graph, plot, chart, model} %% without formatting
%% at least one keyword must be supplied

%% publication information
%% NOTE: Typically, this can be left commented and will be filled out by the technical editor
%% \Volume{13}
%% \Issue{9}
%% \Month{September}
%% \Year{2004}
%% \Submitdate{2004-09-29}
%% \Acceptdate{2004-09-29}

%% The address of (at least) one author should be given
%% in the following format:
\Address{
  Enrico Glaab\\
  School of Computer Science\\
  University of Nottingham\\
  NG8 1BB\\
  E-mail: \email{e.glaab@cs.nott.ac.uk}\\
  URL: \url{http://www.infobiotics.org/vrmlgen/}
}
%% It is also possible to add a telephone and fax number
%% before the e-mail in the following format:
%% Telephone: +43/1/31336-5053
%% Fax: +43/1/31336-734

%% for those who use Sweave please include the following line (with % symbols):
%% need no \usepackage{Sweave.sty}

%% end of declarations %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\begin{document}

%% include your article here, just as usual
%% Note that you should use the \pkg{}, \proglang{} and \code{} commands.

%\section[About Java]{About \proglang{Java}}
\section[Introduction]{Introduction}
\label{sec1}
%% Note: If there is markup in \(sub)section, then it has to be escape as above.


3D visualizations for data mining provide an intuitive means to identify 
underlying structures and patterns in a data set which would otherwise often 
remain undetected.

Software tools to create interactive graphical data representations in 3D can be 
used effectively both to explore inherently 3-dimensional data and subspaces and 
projections of higher dimensional data. The latter task is becoming increasingly 
important, as companies and research institutions are striving to fully exploit 
their vast data resources. Moreover, in the last decade, a large number of data 
bases containing complex, high-dimensional data have been published for general 
access on the web. These include, for example, data resources for the life 
sciences \citep{edgar2002gene, widera-gp, healthatlas}, physical sciences 
\citep{nistdata, cfadcdata, verneratomic}, social sciences \citep{cessdadata, 
ecosocdata}, and business and finance \citep{pettijohn1996guide, financialdata, 
nasdaqdata}.

For these reasons, a great variety of software tools has been made available in 
the past to generate 3D data representations with interactive means to explore 
different perspectives, analyze class membership and data density using color 
schemes and contour surfaces, or compare and interlink different data sources 
using overlay-plots and hyperlinks. %and other multimedia features. The widely 
used statistical programming language \proglang{R} \citep{rstat, rlang}, for 
example, contains several software packages for 3D data analysis including a 
package to interconnect \proglang{R} with OpenGL \citep{adler2003rgl} and 
various packages for multivariate data visualization (\cite{feng2005misc3d, 
sarkar2008lattice, ligges2003scatterplot3d}; see section \ref{sec4} for a more 
detailed discussion).


However, though users can choose between many freely available offline-tools to 
inspect 3D data on their own computer,  it is still a difficult task to make 3D 
visualizations publicly available and directly viewable on the web. Currently 
available software tools or packages for 3D plotting do not provide features for 
a web-based interactive exploration of the data. Apart from speed limits on the 
internet for loading large data sets, other restrictions arise from the fact 
that different web browsers do not support the same graphics file formats and 
the 3D-visualization plugins are often only compatible with a limited number of 
browsers.


Here, we present \pkg{vrmlgen}, a software package for the \proglang{R} 
statistical data analysis environment, which enables users to generate 
interactive web-based visualizations for 3D input data. Charts, graphs, bar 
plots and scatter plots, 3D meshes and parametric functions are visualized in 
two common web-formats, VRML (Virtual Reality Markup Language) and 
LiveGraphics3D. Files in the common VRML-format \citep{ames1997vrml} enable an 
interactive virtual navigation in complex 3D models and can be displayed on the 
web with free plugins available for every common browser platform. The Java-
based LiveGraphics3D format by \cite{kraus2003livegraphics3d}, which is 
supported as an alternative to VRML, provides a somewhat reduced user 
interaction functionality and is based on the simple ``painter's algorithm'' to 
hide occluded surfaces, but it can be viewed in any Java-enabled browser without 
the need to install a plugin. \pkg{vrmlgen} is freely available subject to the 
GNU General Public Licence (GPL version 3).


In addition to the \proglang{R} package, we provide a simple web-application to 
illustrate some of \pkg{vrmlgen}'s main features and enable the user to easily 
generate colored and labeled 3D visualizations for uploaded data without the 
need to install any software (available at 
\url{http://www.infobiotics.org/vrml}). Similarly, the \proglang{R} package is 
employed on a bioscientific web-server for DNA microarray analysis, 
ArrayMining.net \citep{glaab2009arraymining, infobiotics2009}, to visualize 
clustering results in a low-dimensional representation.


The structure of the paper is as follows: We will present \pkg{vrmlgen}'s 
features and code examples (section \ref{sec2}), discuss the implementation 
(\ref{sec3b}), extensions and related software (\ref{sec4}), provide 
installation instructions (\ref{sec5}) and we conclude the paper with a summary 
and conclusion section (\ref{sec6}).

\pkg{vrmlgen} and the \proglang{R} software environment can be obtained from the 
Infobiotics project repository (\url{www.infobiotics.net}) and the Common 
\proglang{R} Archive Network (CRAN, \url{http://cran.R-Project.org}). VRML-files 
can be inspected either with offline viewers, e.g. ``BS Contact VRML 7.1'' 
\citep{bscontact2009}, or browser plugins, e.g. ``Cortona 3D viewer 6.0'' 
\citep{cortona2009} (for further software alternatives, see \cite{vrmlweb3d}).





\section{Features and examples}
\label{sec2}

In this section we will first give an overview of \pkg{vrmlgen}'s main functions 
and then discuss each of the methods in detail with source code examples for 
typical applications.

\subsection{Overview of available functions}

The \pkg{vrmlgen} package contains both higher-level plotting functions for 
creating common data visualizations like scatter plots, bar charts and mesh 
visualizations, and lower-level methods, enabling users to draw primitive shapes 
and objects through a unified, format-independent interface. Moreover, both 
higher- and lower-level function calls can be grouped together to build a 3D 
scene, using a mechanism similar to other \proglang{R} graphics devices (see 
section \ref{sec3}).

Many higher-level plotting tasks can be realized directly with a single function
call of one of \pkg{vrmlgen}'s three main plotting functions: 
\begin{itemize}
\item the \emph{cloud3d()}-function for creating 3D scatter plots and surfaces,
\item the \emph{bar3d()}-function for generating bar plots and height map visualizations, and
\item the \emph{mesh3d()}-function for displaying parametric functions and 3D meshes.
\end{itemize}
To change the output format for a plot (VRML or Livegraphics3D) only a single parameter 
has to be modified. Other format-specific parameters are highlighted by a prefix (``vrml\_'' or ``lg3d\_'')
and are set to commonly used default values to reduce the number of required
adjustments.
Fig.~\ref{fig:overview} provides an overview of the main plot types
and functions available in the \pkg{vrmlgen} package.


\begin{figure}[htpb]
\centerline{\includegraphics[scale=1.0]{vrmloverview.jpg}}
\caption{Overview of \pkg{vrmlgen}'s main functions and features}
\label{fig:overview}
\end{figure}


Examples of how each of these main plotting functions can be used to generate 
different types of 3D data visualizations and customize the properties of a plot 
will be given in the following sections. Apart from the web-based outputs that 
can be obtained with these functions, perspective plots of 3D data can also be 
rendered in high-quality and used in scientific publications by combining 
\pkg{vrmlgen} with other free software tools, for example to convert VRML-output 
into the POV-Ray-format \citep{thiessen2004vrml, plachetka1998pov}.
   
In contrast to other plotting functions in \proglang{R} and related statistical 
software tools, \pkg{vrmlgen} provides features related to the interactive 
exploration and HTML-embedding of the 3D data. For example, the cloud3d-function 
allows users to specify ``meta-labels'' for data points in VRML-scenes, i.e. 
textual information which is displayed as a message box when the user moves the 
mouse over a data point in a 3D plot (available in all Javascript-enabled VRML-
plugins). Moreover, to exploit the advantages of web-based graphics formats, 
hyperlinks can be added to each object in a 3D scene, and \pkg{vrmlgen} can 
automatically generate an HTML-template to embed the created 3D plots in a web 
page.

To simplify the use of \pkg{vrmlgen} for experienced \proglang{R} users, typical 
plotting features (e.g. color, format and scale settings) and the function and 
parameter names have been chosen so as to maintain familiar aspects from related 
2D plotting functions and ``offline''-methods for 3D-visualization in R.

Below we discuss \pkg{vrmlgen}'s functions and features in detail, providing 
code examples for typical example applications of different types of 3D plots.




\subsection{Combining primitive shapes to create complex 3D-scenes}
\label{sec3}

\pkg{vrmlgen} provides direct access to low-level plotting functions for drawing 
points (\emph{points3d()}), lines (\emph{lines3d()}), text (\emph{text3d()} and 
coordinate axes (\emph{axis3d()}) through a format-independent interface, 
enabling users to switch between the VRML- and the Livegraphics3D-output format 
by only changing the \emph{type}-parameter (see examples below). Alternatively, 
for users who wish to quickly generate common data visualizations in 3D, like 
scatter plots, bar charts or mesh visualizations, the higher-level functions 
\emph{cloud3d()}, \emph{bar3d()} and \emph{mesh3d()} are available and only 
require the user to configure relevant parameters (these methods are discussed 
in detail in the following sections).

In addition to the functionality provided by the single plotting methods, both 
low- and high-level function calls can be combined together by placing them 
between a \emph{vrml.open()} and a \emph{vrml.close()} statement (or 
respectively, \emph{lg3d.open()} and \emph{lg3d.close()} statements to create 
Livegraphics3D-output instead of VRML-output). This design imitates the 
architecture of other graphics devices in \proglang{R}, like \emph{pdf()} or 
\emph{png()}, and enables the user to build a complex 3D-scene by sequentially 
adding new objects to it before creating the final output by calling 
\emph{vrml.close()} or \emph{lg3d.close()}. General settings for a 3D scene like 
the background color, the viewing perspective, or a global scaling factor to 
increase/decrease the size of all objects in the scene, can be configured with 
the parameters of the \emph{vrml.open()} and \emph{lg3d.open()} functions and 
will be inherited by all plotting methods called afterwards.

Fig.~\ref{fig:c60molecule} shows an example 3D-scene that has been created using 
the vrml.open()- and vrml.close() mechanism (see source code in 
Fig.~\ref{fig:code1}). After setting the global parameters in \emph{vrml.open()} 
(here: applying a scaling factor of 5 to the scene and embedding the VRML-output 
in an HTML-file), a dataset of atom coordinates is loaded and the atoms are 
drawn into a 3D scene with the \emph{points3d()} function. To illustrate how 
\pkg{vrmlgen} can profit from the built-in functionality of the \proglang{R} 
statistical programming language, lines to represent the bonding patterns 
between atom pairs are not drawn by reading an additional input file, but by 
using \proglang{R} statements to draw lines between all atom coordinates that 
fulfill a certain distance criterion (the Euclidean distance has to be smaller 
than 0.66 units in the VRML-scene).

Thus, by combining low-level plotting functions with \pkg{R}-based data 
processing and manipulation, the user can create complex 3D-object models and 
environments that can be interactively explored in a web-browser. Additionally, 
3D-mesh models, surfaces defined by parametric functions or height maps can be 
added to a VRML- or Livegraphics3D-scene or the user can write self-defined 
higher-level plotting functions by combining existing plotting methods in new 
\proglang{R}-functions. \pkg{vrmlgen}'s pre-defined higher-level plotting 
methods are discussed in the following sections.




\begin{center}
\begin{figure}[htpb]
\centerline{\includegraphics[width=8cm]{c60example.png}}
\caption{Visualization of a C60 molecular structure by combining primitive shapes (spheres and cylinders, see source code below)}
\label{fig:c60molecule}
\end{figure}


\begin{figure}

\begin{center}
\fbox{\parbox{13cm}{
\medskip

\code{\\ vrml.open(file="c60.wrl", html.embed="c60example.html", scale=5) \\ \\ \hspace*{6mm} \# load dataset \\ \hspace*{6mm} data(c60coords) \\ \\ \hspace*{6mm} \# plot the atoms as black spheres and add hyperlinks\\ \hspace*{6mm} points3d(c60coords, col="black", scale = 5, \\ \hspace*{19mm} hyperlinks=rep("http://wikipedia.org/wiki/Carbon",60)) \\ \\ \hspace*{6mm} \# plot the atom bonds as gray lines \\ \hspace*{6mm} for(j in 1:(nrow(c60coords)-1)) \\ \hspace*{6mm} \{ \\ \hspace*{12mm} for(k in (j+1):nrow(c60coords)) \\ \hspace*{12mm} \{ \\	\hspace*{18mm} if(sqrt(sum((c60coords[j,]-c60coords[k,])\textasciicircum 2)) < 0.66) \\ \hspace*{24mm} lines3d(c60coords[c(j,k),], col="gray", lwd=3)  \\ \hspace*{12mm} \} \\ \hspace*{6mm} \} \\ vrml.close() \\ \\ \# show the output in a web-browser (VRML-plugin required) \\  browseURL(paste("file://",file.path(getwd(), \\ \hspace*{18mm} "c60example.html"), sep=""))}
\medskip
}}
\end{center}

\caption{Reading atom coordinates of a C60 molecule and visualizing the atoms by black spheres. To represent the atom bonds, cylinders are drawn between all spheres with a Euclidean distance smaller than a threshold value (0.66). The \emph{html.embed} parameter specifies an HTML-file that embeds the VRML-output, the \emph{scale} parameter determines the size of the entire 3D scene and the \emph{hyperlinks} parameter in the \emph{points3d}-function attaches a web link to each plotted sphere (in the example, a link to the Wikipedia page on carbon atoms).}
\label{fig:code1}
\end{figure}
\end{center}


\subsection{Scatter plots and density estimation contour surfaces}

The most common format for representing 2D and 3D statistical data are scatter 
plot visualizations. In this section we will illustrate how the \pkg{vrmlgen} 
package allows users to translate 3D point data into interactive scatter plots 
in VRML- or LiveGraphics3D-format using the cloud3d-function. Apart from the 
basic functionality, additional features like meta-labels and density estimation 
contour surfaces will be discussed based on an example dataset from a breast 
cancer microarray study.


To obtain a simple 3D scatter plot, the user only needs to provide the input in 
a format that can be coerced to a numerical matrix with 3 columns, e.g. 3 
vectors with equal length (the \emph{xyz.coords()}-function from the 
\proglang{R} \pkg{base} package is used to provide this functionality). All 
other function-parameters are optional, but enable the user to add meta-
information to the plot or to customize the color-, perspective- and scaling-
properties according to the user's needs. An example based on a public breast 
cancer microarray dataset \citep{breastcancnott} after dimensionality reduction 
using Independent Component Analysis is shown in Fig.~\ref{fig:iris} together 
with the source code to reproduce the image (see Fig.~\ref{fig:code2}).

By providing the cloud3d-function with the class information for the data points 
(here the two classes are the breast cancer tumor grades 1, for the least 
aggressive tumors, and 3, for the most severe tumors), samples from different 
classes are automatically represented by different colors and different point 
styles and a legend is generated above the Z-axis. Apart from the color-labeled 
data points, density estimation contour surfaces can optionally be added to the 
plot (Fig.~\ref{fig:iris}, right), which represent regions of high data density 
in the plot (visualized by green and yellow surfaces, with green representing 
the highest data density). In the breast cancer example dataset, interestingly, 
most of the low-grade tumor samples appear to be clustered together in a high-
density region of the plot, whereas the high-grade tumor samples are scattered 
more widely across the plot. The contour surface feature was implemented 
following the example of the R-package \pkg{sm} \citep{bowman2008} and makes use 
of the \emph{contour3d}-function from the \pkg{misc3d}-package 
\citep{feng2005misc3d}. Additional textual information can be included in a plot 
by specifying a vector of labels for the samples using the \emph{metalabels}-
parameter. When the user moves the mouse over a data point in a VRML-
visualization, the corresponding label will be shown as a tool-tip message above 
the Z-axis.

In order to create plots for high-dimensional datasets, common dimensionality 
reduction methods can be applied before passing the data to the visualization 
functions. Examples for freely available functions and packages in \proglang{R} 
for dimensionality reduction include \emph{prcomp} from the \pkg{stats} package 
to compute the principal components of a data set and the \pkg{fastICA} package 
for Independent Component Analysis, which was used for the breast cancer example 
data.


\begin{center}
\begin{figure}[!tpb]
\centerline{\includegraphics[width=1.0\textwidth]{breastexample.png}}

\caption{Left: Scatter plot visualization of breast cancer microarray samples \citep{breastcancnott} after dimensionality reduction with Independent Component Analysis. Right: The same scatter plot with density estimation contour surfaces (yellow = high data density regions, green = region of highest density).}
\label{fig:iris}
\end{figure}

\begin{figure}
\begin{center}
\fbox{\parbox{13cm}{
\medskip

\code{\\ \# load dataset and class labels \\ data(bc\_dat) \\ data(bc\_classes) \\ \\ cloud3d(bc\_dat, labels=paste("tumor grade", \\ \hspace*{14mm} as.numeric(bc\_classes)), vrml\_showdensity=TRUE, \\ \hspace*{14mm} metalabels = paste("sample",1:nrow(bc\_dat)), \\ \hspace*{14mm} lab.axis=paste("ICA dimension",1:3), \\ \hspace*{14mm} filename="example2.wrl", htmlout="example2.html") \\  \\ \# show the output in a web-browser (VRML-plugin required) \\ browseURL(paste("file://",file.path(getwd(), \\ \hspace*{18mm} "example2.html"), sep=""))}
\medskip
}}
\end{center}

\caption{Generating a 3D VRML scatter plot for a breast  cancer gene expression dataset obtained after dimensionality  reduction with Independent Component Analysis. Density esti-  mation contour surfaces (\emph{vrml\_showdensity}), meta-labels for the samples (\emph{metalabels}) and user-defined axis labels  (\emph{lab.axis}) are provided, and the output is embedded in an HTML-file (\emph{htmlout}, if this parameter is not provided, only  the VRML-output will be generated).}
\label{fig:code2}
\end{figure}
\end{center}


\subsection{Parametric functions and 3D meshes}

Apart from plotting 
matrix data sets, \pkg{vrmlgen} can also be used to visualize models of
3D objects and parametric functions defining 3D surfaces.
This functionality is available in the mesh3d-function, which is used in 
a similar manner as the cloud-function discussed in the previous section.
The user can either directly specify the vertices and edges
of a 3D mesh, formulate a parametric function which defines
a 3D surface or load a 3D-model file in the common obj-format (the obj-input can
only be used when creating VRML-output, because the Livegraphics3D-format does
not support the specification of polygonal faces based on vertex-identifiers).
Additionally, obj-files can be created as output, when the input data
contains both vertex-coordinates and edge-indices
and the parameter \emph{write\_obj} is set to ``TRUE''.

To visualize 3D parametric curves and surfaces, one parametric function for each 
dimension has to be specified (using the \emph{xfun}, \emph{yfun} and 
\emph{zfun}-variables) together with the function parameters (\emph{param1} and 
\emph{param2}) and their value ranges (\emph{range1} and \emph{range2}). 
Additional configurations for the mesh size, the color, scaling and initial 
perspective can optionally be adjusted. Fig.~\ref{fig:mesh} shows an example 
representation of a parametric function describing a spiral, which can be 
generated by calling the mesh3d-function (see Fig.~\ref{fig:code3}).

If the data size of the obtained output is too large for a presentation on the 
web, the mesh-resolution can easily be reduced by choosing smaller values for 
the ``size''-parameters.



\begin{figure}[htpb]
\centerline{\includegraphics[width=1.0\textwidth]{spiralperspective.png}}
\caption{Mesh-visualization of a parametric function representing the surface of a spiral (seen from two different perspectives)}
\label{fig:mesh}
\end{figure}


\begin{center}
\begin{figure}
\begin{center}
\fbox{\parbox{13cm}{
\medskip
\code{\\ mesh3d(xfun="s*cos(s)*(4 + cos(t+s))",
\\ \hspace*{12mm} yfun="s*sin(s)*(4 + cos(t+s))",
\\ \hspace*{12mm} zfun="s*sin(t+s)", param1="s",
\\ \hspace*{12mm} param2="t", range1=c(0,4*pi),
\\ \hspace*{12mm} range2=c(0,2*pi), cols=NULL,
\\ \hspace*{12mm} filename="example3.m",
\\ \hspace*{12mm} type="lg3d", htmlout="example3.html")
\\
\\ \# show the output in a web-browser 
\\ \# (must be Java-enabled)
\\ browseURL(paste("file://",file.path(getwd(),
\\ \hspace*{18mm} "example3.html"), sep=""))
}
\medskip
}}
\end{center}

\caption{Visualization of a parametric function defining   the surface of a 3D spiral. The function depends on two parameters $s \in [0,4 \cdot pi]$ and $t \in [0,2 \cdot pi]$), for which the variable names and value ranges can be specified with the \emph{param} and \emph{range} parameters. The parametric surface is defined using  the \emph{xfun}, \emph{yfun} and \emph{zfun} parameters (if the "cols"-parameter is set to NULL, rainbow colors are used by default to visualize the surface).}
\label{fig:code3}
\end{figure}
\end{center}







In addition to plotting curves and surfaces defined by parametric functions, 
\pkg{vrmlgen} supports the visualization of polygon meshes representing the 
shape of arbitrary geometric objects. These 3D mesh models are widely used in 
computer graphics and solid modeling and can be generated with the 
\emph{mesh3d}-function by either manually passing the data for the vertices, 
edges and faces or by loading a 3D-model file in the Wavefront obj-format 
\citep{murray2005wavefront}. The obj-format is one of the most common file 
formats for geometric modeling and is supported by the great majority of 3D 
designing tools. Thus, users have the possibility to create 3D models with their 
preferred modeling software and use the mesh3d-function in \pkg{vrmlgen} to 
transform obj-models into the VRML-format for publication on the web.


Fig.~\ref{fig:citymodel} provides an example visualization of an obj-file 
containing a 3D model of a city block (the model file was obtained from 
\cite{cityblock}, the source code is shown in Fig.~\ref{fig:code4}). The same 
visualization type can be used to obtain representations of arbitrary 
architectural, industrial or scientific objects, e.g. engineering prototypes, 
prosthetics and molecular structures.



\begin{figure}[htpb]%figure1
\fbox{
\centerline{\includegraphics[width=1.0\textwidth]{cityblock.png}}
}
\caption{Visualization of a 3D mesh model of buildings in a city block (model source: \cite{cityblock})}
\label{fig:citymodel}
\end{figure}

\begin{center}
\begin{figure}
\begin{center}
\fbox{\parbox{13cm}{
\medskip
\code{mesh3d(obj\_infile="cityblock.obj", filename="cityblock.wrl", \\  \hspace*{12mm}  cols="lightblue", showaxis=F, htmlout="example4.html") \\ \\ \# show the output in a web-browser \\ \# (VRML-plugin required) \\ browseURL(paste("file://",file.path(getwd(), \\ \hspace*{18mm} "example4.html"), sep=""))}
\medskip
}}
\end{center}

\caption{Reading a 3D-mesh input file and transforming it into a web-based 3D-model (no coordinate axes are drawn, the model is colored light-blue and embedded into a web-page).}
\label{fig:code4}
\end{figure}
\end{center}



\subsection{Bar plots and height map visualizations}

Bar plots often provide a more simple and clear way to visually compare values 
for different variables than scatter plots. Therefore, the \emph{bar3d()}-
function has been added to \pkg{vrmlgen} to quickly transform a data matrix into 
a 3D bar plot which can be viewed from different perspectives in a web-browser. 
Additionally, this function supports the visualization of height maps using 
geographical data or gray scale image maps as input.


Fig.~\ref{fig:barplot} shows a simple bar plot example for a data set comparing 
the lung death rates in the UK for different months from 1974 to 1979 
(\cite{diggle1990time}, available in the \pkg{dataset} package in R). To 
simplify the interpretation of the plot, colors can be set per row or per column 
of the input data (see source code in Fig.~\ref{fig:code5}), without needing to 
specify the color for each single bar and axis label in the plot.


\begin{center}
\begin{figure}[htpb]
\centerline{\includegraphics[width=9cm]{uklungdeath.png}}
\caption{Bar plot showing the monthly death rates from lung diseases in the UK from 1974 to 1979 (left axis: age groups, right axis: population group; data obtained from ``ldeaths'' dataset in \proglang{R} \citep{diggle1990time})}
\label{fig:barplot}
\end{figure}


\begin{figure}
\begin{center}
\fbox{\parbox{13cm}{
\medskip
\code{bar3d(matrix(ldeaths, nrow=6), row.labels=1974:1979, \\  \hspace*{11mm} col.labels=month.abb, cex.lab=1.5, \\  \hspace*{11mm} ccols=rainbow(12), filename="example5.wrl", \\  \hspace*{11mm} type="vrml", lab.vertical=TRUE, \\ \hspace*{11mm} htmlout="example5.html", autoscale=TRUE, scale=4.0) \\ \\ \# show the output in a web-browser \\ \# (VRML-plugin required) \\ browseURL(paste("file://",file.path(getwd(), \\ \hspace*{18mm} "example5.html"), sep=""))}
\medskip
}}
\end{center}

\caption{Creating a 3D bar plot with column-dependent colors and vertical labels}
\label{fig:code5}
\end{figure}
\end{center}

An example for a height map visualization can be seen in Fig.~\ref{fig:volcano} (generated from
a highly simplified and rough topographic gray-scale image of the United Kingdom \citep{topographiuk} by setting all
grey values below a certain threshold (0.53) to zero and using the remaining values to generate the visualization, see Fig.~\ref{fig:code6}).
The reader should note that complex height maps will require more processing time and depending on the size
of the data, they might not always be suitable for presentation on the web.


\begin{center}
\begin{figure}[htpb]
\centerline{\includegraphics[width=6cm]{uktopographic.png}}
\caption{Height map visualization of a rough topographic map for the United Kingdom}
\label{fig:volcano}
\end{figure}


\begin{figure}
\begin{center}
\fbox{\parbox{13cm}{
\medskip
\code{\# load height map data \\ data(uk\_topo)  \\ \\ bar3d(uk\_topo, autoscale=FALSE, cols="blue", \\  \hspace*{12mm}  space=0, showaxis=FALSE, filename = "example6.wrl", \\  \hspace*{12mm} htmlout="example6.html") \\ \\ \# show the output in a web-browser \\ \# (VRML-plugin required) \\ browseURL(paste("file://",file.path(getwd(), \\ \hspace*{18mm} "example6.html"), sep=""))}
\medskip
}}
\end{center}

\caption{Height map visualization of a rough topographic map for the United Kingdom. No scaling is applied (autoscale) and the bars are printed in blue (cols) without  any space between them (space). The plot is drawn without axes (showaxis) and is embedded in an HTML-page (htmlout).}
\label{fig:code6}
\end{figure}
\end{center}



\subsection{Navigation- and web-related features}

When displaying 3D data on the web, the content provider might not only want to 
specify the visual properties of a plot but also configure how the user can 
navigate through the displayed data and interact with it using web-related 
features like hyperlinks or Javascript-based functions.

For this reason, \pkg{vrmlgen} enables the user to specify a default mouse 
navigation type for VRML plots, which determines how the VRML-browser responds 
to mouse movements for exploring a virtual 3D space. The five available 
navigation types - "EXAMINE" (default), "WALK", "SLIDE", "FLY" or "PAN" - can be 
selected with the \emph{navigation} parameter and provide different ways to 
inspect a plot by applying various types of simple rotational or translational 
movements to the virtual camera. 

In the cloud3d-function a hyperlink can be assigned to each data point displayed 
in a scatter plot using the \emph{hyperlink}-parameter (for an example, see 
Fig.~\ref{fig:code1}). Thus, a visualization can be inter-linked with additional 
information like text and images on user-created web-pages or with public, web-
based data bases. For example, in the biosciences a typical usage scenario could 
be to link genes in a  low-dimensional representation of gene expression data 
with the entries of a functional annotation data base.


As an alternative to hyperlink-labels, additional textual information on each 
data point can also be included directly in the plot, using the 
\emph{metalabels}-parameter in the cloud3d-function (see Fig.~\ref{fig:code2}). 
This feature makes use of the Javascript facilities in VRML and provides the 
user with quick access to pre-defined text labels, which are displayed when the 
mouse cursor hovers over a data point.





\subsection{Web-tool for demonstration purposes}

To enable a prospective user to get an idea of some of \pkg{vrmlgen}'s features 
and how plots can be generated and inspected, we have created a simple web-tool 
based on our R-package (available at \url{http://www.infobiotics.org/vrml}). A 
user can paste a 3D data matrix in tab-delimited format on the web-interface, 
with optional columns for color labels or additional textual information (see 
``meta-labels'' discussed in the previous section), and submit the data with a 
single mouse-click to obtain the outcome generated with \pkg{vrmlgen}. 3D plots 
will be generated both in VRML- and the LiveGraphics3D-format. Moreover, the 
web-application provides various example data sets which can be selected, freely 
modified and visualized by the user. Since the amount of data which can be 
uploaded is limited and not all of \pkg{vrmlgen}'s features can easily be made 
accessible on the web, this online tool is mainly provided for demonstration and 
test purposes. However, for simple visualization tasks the web-interface can be 
a fast and simple way to obtain a colored, labeled and navigable data plot 
without having to install any software on the client computer.



\section{Implementation}
\label{sec3b}

\pkg{vrmlgen} is written entirely in the \proglang{R} programming language and 
can be installed on all operating systems for which the \proglang{R} software is 
available. The variable names in the function bodies have been adapted to follow 
common \proglang{R} naming conventions and help and examples for all functions 
can be obtained by typing \code{?vrmlgen} at the \proglang{R} command prompt. A 
dedicated website with installation and usage instructions as well as example 
output pictures is available at \url{http://www.infobiotics.org/vrmlgen}. 
Additionally, we have implemented a web-tool for demonstration purposes (see 
previous section), which is based on a PHP-interface running on an Apache web-
server and enables users to access some of \pkg{vrmlgen}'s main functions 
without the need for a local software installation.

The \proglang{R} package was build following the recommendations in the official 
``Writing \proglang{R} Extensions'' tutorial by the \cite{rdevel2009writing} and 
has been published in the Infobiotics project repository 
(\url{www.infobiotics.org}) as well as in the CRAN archive (Common \proglang{R} 
Archive Network, \url{http://cran.R-Project.org}).




\section{Extensibility and related software}
\label{sec4}

The \pkg{vrmlgen} package is built entirely based on functions from the 
\proglang{R} \pkg{base} package and the \emph{contour3d}-function from the 
\pkg{misc3d}-package \citep{feng2005misc3d}. Thus, the sources can easily be 
modified and extended. An installed version of \pkg{vrmlgen} can be updated to 
the latest build using the \emph{update.packages}-function from the \pkg{utils} 
package in \proglang{R}.

Several related 3D visualization packages for the \proglang{R} environment have 
been developed in the past. One of the most well-known 3D-extensions for 
\proglang{R} is the \pkg{RGL}-package \citep{adlerrgl}, which enables users to 
visualize graphics with OpenGL from within an R-session. Although OpenGL enables 
users to exploit the capabilities of modern graphics hardware, in contrast to 
\pkg{vrmlgen} the \pkg{RGL}-based visualizations cannot be integrated and 
directly viewed in a webpage. While \pkg{RGL} provides more flexibility in 
controlling mouse-events via R-functions, these features are also more difficult 
to use for a beginner than for example the tool-tip labels in VRML, which can be 
configured with relatively simple parameter settings in \pkg{vrmlgen}. Apart 
from this, plotted data points in VRML can be interlinked with online databases 
by assigning hyperlinks to each data point (which is currently not possible with 
the \pkg{RGL}-package).

For high-dimensional data sets various other \proglang{R}-packages are available 
which provide dimensionality reduction methods and/or 3D visualization 
facilities, e.g. the packages \pkg{misc3d} \citep{feng2005misc3d}, \pkg{lattice} 
\citep{sarkar2008lattice} and \pkg{scatterplot3d} 
\citep{ligges2003scatterplot3d}. Alternatively, \pkg{R}-users can choose to rely 
on interfaces to external software for multivariate data visualization. For 
example, the \pkg{xgobi} package \citep{maechler2009xgobi} provides an interface 
to the \pkg{XGobi} and \pkg{XGvis} programs for analysis and visualization of 
high-dimensional data \citep{swayne1998xgobi, buja2001xgvis}. Similarly, for 
\pkg{GGobi} \citep{swayne2003ggobi}, the successor of \pkg{XGobi}, an R-package 
has been developed to link the \proglang{R} environment with the features of 
\pkg{GGobi}.

Apart from these general-purpose tools, there are several other more specialized 
\proglang{R}-packages for multivariate data visualization. Two notable examples 
are the \pkg{denpro} package, which uses level set trees, tail and shape trees 
to visualize multivariate data, density functions and level sets, and the 
\pkg{plotrix}-package \citep{lemon2009plotrix}, which provides a great variety 
of special plotting functions including 3-dimensional methods like 3D pie 
charts.

While all these packages are very useful for visualization purposes on a single 
computer, their generated output cannot be made accessible directly in a browser 
on the web, where a large number of external users might be interested in 
exploring the data. However, since the above packages provide many features 
which are not included in \pkg{vrmlgen} and use the more powerful graphics and 
rendering capabilities of the local hardware, \pkg{vrmlgen} is intended to 
complement, not replace the existing packages, by allowing \proglang{R}-users to 
make some of the most common types of 3D plots available on the web for 
interactive data exploration.




\section{Installation instructions}
\label{sec5}

\pkg{vrmlgen} requires a recent pre-installed version of the \proglang{R} 
statistical programming environment, which is freely available for all major 
operating systems at \url{http://www.r-project.org} including both source code 
and binaries.

On a computer with internet connection and no firewall/proxy-related 
restrictions, \pkg{vrmlgen} can easily be installed and loaded by starting an 
\proglang{R} session and typing the following two lines at the command prompt:

\code{install.packages("vrmlgen")}

\code{library("vrmlgen")}

Alternatively, the package can also be downloaded from the CRAN-archive or at 
\url{http://www.infobiotics.org/vrmlgen} and installed manually, or an internet 
proxy can be specified in the \proglang{R} terminal using

\code{Sys.setenv("http\_proxy" = "hostname:port")}

where ``hostname'' is the hostname or IP of the proxy server and ``port'' is the 
proxy's port number. Help and example code can be obtained with the command 
``?vrmlgen'' in a running \proglang{R} terminal afer having loaded the 
\pkg{vrmlgen} package.

To view created VRML-models in a web-browser, a VRML-plugin needs to be pre-
installed. Many plugins for this purpose are available as freeware on the web 
for different browsers and platforms, however, to exploit all of \pkg{vrmlgen}'s 
features, the installed VRML viewer has to support VRML 2.0 and Javascript. Two 
examples which fulfill these requirements and have been used by the authors of 
the paper are the freeware plugin ``Cortona 3D viewer 6.0'' \citep{cortona2009} 
and the offline viewer ``BS Contact VRML 7.1'' \citep{bscontact2009}. A list of 
alternative software can be found on the webpage of the \cite{vrmlweb3d}.




\section{Summary and conclusions}
\label{sec6}

\pkg{vrmlgen} is a new \proglang{R} software package to generate 3D 
visualizations for interactive data exploration on the web. It provides 
functions for the creation of scatter and bar plots, and visualizations of 3D 
meshes, parametric functions and height maps, as well as access to low-level 
plotting functions. Calls of different plotting functions can be grouped 
together to generate complex 3D-scenes, and the user can write new higher-level 
plotting methods based on the already existing functionality. Additional 
features include the possibility to assign hyperlinks and meta-labels to the 
data points and to visualize regions of high data density by means of contour 
surfaces. All outputs are provided in two common web-formats, the VRML- and 
LiveGraphics3D-format. Apart from using the obtained 3D models for data 
presentation on the web, these files can also serve as input for freeware 
rendering software to generate high-quality perspective plots for scientific 
publications.

For demonstration purposes, \pkg{vrmlgen} has been inter-linked with a PHP-
interface to enable users to generate visualizations of uploaded 3D data 
matrices on the web without the need to install any software 
(\url{http://www.infobiotics.org/vrml}). Moreover, the \proglang{R}-package is 
employed in practice on a bioinformatics web-server for DNA-chip analysis 
\citep{glaab2009arraymining, infobiotics2009}. These example applications show 
that \pkg{vrmlgen} can readily be used within web-applications to generate 3D 
visualizations dynamically in response to user activity on a web site.



\section{Acknowledgements}
\label{sec7}

We thank the reviewers for their suggestions, which have helped us
to improve the software package and the manuscript.
We acknowledge support by the Marie-Curie Ear\-ly-Sta\-ge-Train\-ing programme 
(grant MEST-CT-2004-007597), by the UK Engineering and Physical Sciences 
Research Council (EP/E017215/1) and the Biotechnology and Biological Sciences 
Research Council (BB/F01855X/1).


\bibliography{jssbib}

\end{document}
